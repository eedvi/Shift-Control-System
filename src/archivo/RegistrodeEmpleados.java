/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package archivo;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;

/**
 * Enhanced Employee Registration Form with all required fields
 */
public class RegistrodeEmpleados extends javax.swing.JFrame {

    private Empleado usuarioActual;
    private DatabaseManager dbManager;
    private BitacoraManager bitacoraManager;
    private EmailService emailService;

    // Additional form fields for comprehensive employee data
    private JTextField txtUsername;
    private JTextField txtEmail;
    private JPasswordField txtPassword;
    private JComboBox<String> cboMotivoInactividad;

    /**
     * Creates new form RegistrodeEmpleados
     */
    public RegistrodeEmpleados() {
        initComponents();
        // Constructor para compatibilidad
    }

    /**
     * Constructor with dependencies
     */
    public RegistrodeEmpleados(Empleado usuario, DatabaseManager db, BitacoraManager bitacora, EmailService email) {
        this.usuarioActual = usuario;
        this.dbManager = db;
        this.bitacoraManager = bitacora;
        this.emailService = email;
        initComponents();
        setupAdditionalFields();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        Estado = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        txtdpi = new javax.swing.JTextField();
        txtnombre = new javax.swing.JTextField();
        txtarea = new javax.swing.JTextField();
        cboturno = new javax.swing.JComboBox<>();
        cboestado = new javax.swing.JComboBox<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();

        jMenu1.setText("jMenu1");

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("Resgistro de Empleados");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setText("No. Dpi:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel3.setText("Nombre:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel4.setText("Area:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel5.setText("Turno");

        Estado.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        Estado.setText("Estado");

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jButton1.setText("Agregar Empledo");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        txtdpi.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        txtnombre.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        txtarea.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        cboturno.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        cboturno.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Matutino", "Vespertino", "Nocturno" }));

        cboestado.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        cboestado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Activo", "Inactivo" }));

        jMenu2.setText("Menu");

        jMenuItem2.setText("Salir");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem3.setText("Mostrar empleados");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(257, 257, 257)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(133, 133, 133)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Estado)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(6, 6, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cboturno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cboestado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(373, 373, 373))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtdpi, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtnombre, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtarea, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(179, 179, 179))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jLabel1)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtdpi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtnombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtarea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(cboturno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Estado)
                    .addComponent(cboestado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(64, 64, 64)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setupAdditionalFields() {
        // Enhance the form with additional required fields
        Container contentPane = getContentPane();
        contentPane.setLayout(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();

        // Clear existing content and rebuild with comprehensive form
        contentPane.removeAll();

        // Title
        JLabel lblTitulo = new JLabel("Registro de Empleados");
        lblTitulo.setFont(new Font("Tahoma", Font.BOLD, 36));
        gbc.gridx = 0; gbc.gridy = 0; gbc.gridwidth = 2;
        gbc.insets = new Insets(20, 20, 30, 20);
        contentPane.add(lblTitulo, gbc);

        // Reset grid settings
        gbc.gridwidth = 1;
        gbc.insets = new Insets(5, 20, 5, 10);
        gbc.anchor = GridBagConstraints.WEST;

        // Required fields (marked with *)
        addFormField(contentPane, gbc, "No. DPI (*)", txtdpi = new JTextField(20), 1);
        addFormField(contentPane, gbc, "Nombre Completo (*)", txtnombre = new JTextField(20), 2);
        addFormField(contentPane, gbc, "Username (*)", txtUsername = new JTextField(20), 3);
        addFormField(contentPane, gbc, "Área/Departamento (*)", txtarea = new JTextField(20), 4);

        // Shift selection
        cboturno = new JComboBox<>(new String[]{"Matutino", "Vespertino", "Diurno"});
        addFormField(contentPane, gbc, "Turno (*)", cboturno, 5);

        // Status
        cboestado = new JComboBox<>(new String[]{"Activo", "Inactivo"});
        addFormField(contentPane, gbc, "Estado", cboestado, 6);

        // Inactivity reason (only visible when Inactive is selected)
        cboMotivoInactividad = new JComboBox<>(new String[]{
            "Permiso Personal", "Vacaciones", "Cita IGSS", "Día de Cumpleaños",
            "Suspensión Laboral", "Otro"
        });
        addFormField(contentPane, gbc, "Motivo Inactividad", cboMotivoInactividad, 7);

        // Email and password
        addFormField(contentPane, gbc, "Email", txtEmail = new JTextField(20), 8);
        addFormField(contentPane, gbc, "Contraseña", txtPassword = new JPasswordField(20), 9);

        // Buttons
        JPanel panelBotones = new JPanel(new FlowLayout());

        JButton btnRegistrar = new JButton("Registrar");
        btnRegistrar.setFont(new Font("Tahoma", Font.BOLD, 18));
        btnRegistrar.addActionListener(this::registrarEmpleado);
        panelBotones.add(btnRegistrar);

        JButton btnRegresar = new JButton("Regresar");
        btnRegresar.setFont(new Font("Tahoma", Font.BOLD, 18));
        btnRegresar.addActionListener(this::regresarMenu);
        panelBotones.add(btnRegresar);

        gbc.gridx = 0; gbc.gridy = 10; gbc.gridwidth = 2;
        gbc.insets = new Insets(20, 20, 20, 20);
        contentPane.add(panelBotones, gbc);

        // Setup event listeners
        cboestado.addActionListener(e -> toggleMotivoInactividad());
        toggleMotivoInactividad(); // Initial state

        pack();
        setLocationRelativeTo(null);
    }

    private void addFormField(Container container, GridBagConstraints gbc, String labelText, JComponent field, int row) {
        JLabel label = new JLabel(labelText);
        label.setFont(new Font("Tahoma", Font.BOLD, 16));

        gbc.gridx = 0; gbc.gridy = row;
        container.add(label, gbc);

        field.setFont(new Font("Tahoma", Font.PLAIN, 14));
        gbc.gridx = 1; gbc.gridy = row;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        container.add(field, gbc);
        gbc.fill = GridBagConstraints.NONE;
    }

    private void toggleMotivoInactividad() {
        boolean isInactive = "Inactivo".equals(cboestado.getSelectedItem());
        cboMotivoInactividad.setVisible(isInactive);
    }

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        registrarEmpleado(null);
    }

    private void registrarEmpleado(ActionEvent evt) {
        try {
            // Validar campos requeridos
            if (!validarCamposRequeridos()) {
                return;
            }

            // Crear objeto empleado
            String dpi = txtdpi.getText().trim();
            String nombre = txtnombre.getText().trim();
            String username = txtUsername.getText().trim();
            String area = txtarea.getText().trim();
            String turno = (String) cboturno.getSelectedItem();
            String estado = (String) cboestado.getSelectedItem();
            String email = txtEmail.getText().trim();
            String password = new String(txtPassword.getPassword());

            // Verificar duplicados
            if (dbManager.existeUsername(username)) {
                JOptionPane.showMessageDialog(this, "Error: El username ya existe en el sistema",
                                            "Username Duplicado", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (dbManager.existeDpi(dpi)) {
                JOptionPane.showMessageDialog(this, "Error: El DPI ya está registrado",
                                            "DPI Duplicado", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Crear empleado
            Empleado nuevoEmpleado = new Empleado(dpi, nombre, username, area, turno, estado, email, password);

            // Si está inactivo, agregar motivo
            if ("Inactivo".equals(estado)) {
                String motivo = (String) cboMotivoInactividad.getSelectedItem();
                nuevoEmpleado.setMotivoInactividad(motivo);
            }

            // Registrar en base de datos
            if (dbManager.registrarEmpleado(nuevoEmpleado)) {
                JOptionPane.showMessageDialog(this, "Empleado registrado exitosamente",
                                            "Registro Exitoso", JOptionPane.INFORMATION_MESSAGE);

                // Registrar en bitácora
                bitacoraManager.registrarOperacion(usuarioActual.getUsername(), "CREATE_EMPLOYEE",
                                                 "Empleado creado: " + nombre, username);

                // Enviar email de bienvenida si está activo
                if ("Activo".equals(estado) && !email.isEmpty()) {
                    emailService.enviarEmailSimulado(email, "Bienvenido al Sistema RRHH",
                        "Estimado/a " + nombre + ",\n\nSu cuenta ha sido creada exitosamente.\n" +
                        "Username: " + username + "\n\nSaludos cordiales,\nSistema RRHH");
                }

                // Limpiar formulario
                limpiarFormulario();

            } else {
                JOptionPane.showMessageDialog(this, "Error: Ocurrió un error al registrar el empleado",
                                            "Error de Registro", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error inesperado: " + e.getMessage(),
                                        "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private boolean validarCamposRequeridos() {
        StringBuilder errores = new StringBuilder();

        if (txtdpi.getText().trim().isEmpty()) {
            errores.append("- No. DPI es requerido\n");
        }
        if (txtnombre.getText().trim().isEmpty()) {
            errores.append("- Nombre Completo es requerido\n");
        }
        if (txtUsername.getText().trim().isEmpty()) {
            errores.append("- Username es requerido\n");
        }
        if (txtarea.getText().trim().isEmpty()) {
            errores.append("- Área/Departamento es requerido\n");
        }
        if (cboturno.getSelectedItem() == null) {
            errores.append("- Turno es requerido\n");
        }

        if (errores.length() > 0) {
            JOptionPane.showMessageDialog(this, "Campos requeridos faltantes:\n" + errores.toString(),
                                        "Validación", JOptionPane.WARNING_MESSAGE);
            return false;
        }

        // Validar formato de email si se proporciona
        String email = txtEmail.getText().trim();
        if (!email.isEmpty() && !email.contains("@")) {
            JOptionPane.showMessageDialog(this, "El formato del email no es válido",
                                        "Validación", JOptionPane.WARNING_MESSAGE);
            return false;
        }

        return true;
    }

    private void limpiarFormulario() {
        txtdpi.setText("");
        txtnombre.setText("");
        txtUsername.setText("");
        txtarea.setText("");
        txtEmail.setText("");
        txtPassword.setText("");
        cboturno.setSelectedIndex(0);
        cboestado.setSelectedIndex(0);
        cboMotivoInactividad.setSelectedIndex(0);
    }

    private void regresarMenu(ActionEvent evt) {
        MantenimientoUsuario menu = new MantenimientoUsuario(usuarioActual, dbManager, bitacoraManager);
        menu.setVisible(true);
        dispose();
    }

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {
        regresarMenu(null);
    }

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {
        // Open the employee consultation window
        EmpleadosRegistrados empleadosWindow = new EmpleadosRegistrados(usuarioActual, dbManager, bitacoraManager, emailService);
        empleadosWindow.setVisible(true);
        dispose();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Estado;
    private javax.swing.JComboBox<String> cboestado;
    private javax.swing.JComboBox<String> cboturno;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JTextField txtarea;
    private javax.swing.JTextField txtdpi;
    private javax.swing.JTextField txtnombre;
    // End of variables declaration//GEN-END:variables
}
